"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.nodeProtocolImportSpecifier = void 0;
const node_fs_1 = __importDefault(require("node:fs"));
const runtimeModules_1 = require("../runtimeModules");
const replaceLineByMatchRegExpr = ({ contents, moduleName, }) => {
    const reImportSyntax = new RegExp(`import\\s*[\\w\\W]*?\\s*from\\s+["']${moduleName}["']`, 'g');
    const reModuleName = new RegExp(`["']${moduleName}["']`, 'g');
    const convention = `"node:${moduleName}"`;
    const lns = contents.split('\n');
    const res = lns.map((ln) => {
        const shouldReplace = reImportSyntax.test(ln);
        if (!shouldReplace) {
            return ln;
        }
        return ln.replace(reModuleName, convention);
    });
    return res.join('\n');
};
const applyNodeProtocolConvention = async ({ path }) => {
    const buffer = await node_fs_1.default.promises.readFile(path, 'utf8');
    const contents = buffer.toString();
    const output = [
        ...runtimeModules_1.supportedRuntimeModules,
        ...runtimeModules_1.unsupportedRuntimeModules,
    ].reduce((acc, moduleName) => {
        return replaceLineByMatchRegExpr({
            contents: acc,
            moduleName,
        });
    }, contents);
    return {
        contents: output,
    };
};
const nodeProtocolImportSpecifier = ({ onError, }) => ({
    name: 'nodeProtocolImportSpecifier',
    setup(build) {
        build.onLoad({ filter: /\.js$/ }, async ({ path }) => {
            try {
                const output = await applyNodeProtocolConvention({
                    path,
                });
                return output;
            }
            catch (err) {
                onError();
            }
        });
        build.onResolve({ filter: /^node:/ }, (args) => ({
            path: args.path,
            external: true,
        }));
    },
});
exports.nodeProtocolImportSpecifier = nodeProtocolImportSpecifier;
//# sourceMappingURL=nodeProtocolImportSpecifier.js.map