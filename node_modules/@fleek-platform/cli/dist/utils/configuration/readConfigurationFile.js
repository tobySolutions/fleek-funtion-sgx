"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readConfigurationFile = void 0;
const node_module_1 = require("node:module");
const node_fs_1 = require("node:fs");
const node_path_1 = require("node:path");
const errors_1 = require("@fleek-platform/errors");
const ts_node_1 = require("ts-node");
const translation_1 = require("../../utils/translation");
const getConfiguration_1 = require("./getConfiguration");
const readConfigurationFile = async ({ predefinedConfigPath, }) => {
    const configPath = await (0, getConfiguration_1.getConfigurationPath)({ predefinedConfigPath });
    const fileExtension = (0, node_path_1.extname)(configPath);
    if (fileExtension === '.json') {
        const content = await node_fs_1.promises
            .readFile(configPath, 'utf8')
            .catch(() => Promise.reject(new errors_1.FleekConfigMissingFileError({})));
        try {
            return { configuration: JSON.parse(content), configPath };
        }
        catch (e) {
            throw new errors_1.FleekConfigInvalidContentError({
                configPath,
                validationResult: (0, translation_1.t)('jsonNotValid'),
            });
        }
    }
    if (fileExtension === '.ts') {
        (0, ts_node_1.register)({ skipProject: true });
    }
    if (['.js', '.ts'].includes(fileExtension)) {
        try {
            (0, node_module_1.createRequire)(configPath);
        }
        catch (e) {
            throw new errors_1.FleekConfigMissingFileError({ configPath });
        }
        try {
            const loadedConfigModule = await Promise.resolve(`${configPath}`).then(s => __importStar(require(s)));
            if (typeof loadedConfigModule.default === 'function') {
                return {
                    configuration: await loadedConfigModule.default(),
                    configPath,
                };
            }
            if (typeof loadedConfigModule.default !== 'undefined') {
                return { configuration: await loadedConfigModule.default, configPath };
            }
            if (typeof loadedConfigModule === 'function') {
                return { configuration: await loadedConfigModule(), configPath };
            }
            if (typeof loadedConfigModule !== 'undefined') {
                return { configuration: await loadedConfigModule, configPath };
            }
        }
        catch (e) {
            throw new errors_1.FleekConfigInvalidContentError({
                configPath,
                validationResult: e instanceof Error ? e.message : '',
            });
        }
    }
    throw new errors_1.FleekConfigInvalidContentError({
        configPath,
        validationResult: (0, translation_1.t)('unknownFileExt'),
    });
};
exports.readConfigurationFile = readConfigurationFile;
//# sourceMappingURL=readConfigurationFile.js.map